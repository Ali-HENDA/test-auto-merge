name: Dependabot auto-approve & auto-merge (minor/patch)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot-auto:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect semver bump
        id: semver
        run: |
          old=$(echo '${{ steps.metadata.outputs.updated-dependencies-json }}' | jq -r '.[0].previous-version')
          new=$(echo '${{ steps.metadata.outputs.updated-dependencies-json }}' | jq -r '.[0].new-version')

          if [ -z "$old" ] || [ -z "$new" ]; then
            echo "Impossible de dÃ©tecter les versions"
            echo "level=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi

          old_major=$(echo $old | cut -d. -f1)
          old_minor=$(echo $old | cut -d. -f2)
          old_patch=$(echo $old | cut -d. -f3)

          new_major=$(echo $new | cut -d. -f1)
          new_minor=$(echo $new | cut -d. -f2)
          new_patch=$(echo $new | cut -d. -f3)

          if [ "$old_major" != "$new_major" ]; then
            level=major
          elif [ "$old_minor" != "$new_minor" ]; then
            level=minor
          elif [ "$old_patch" != "$new_patch" ]; then
            level=patch
          else
            level=none
          fi

          echo "old=$old new=$new => $level"
          echo "level=$level" >> $GITHUB_OUTPUT

      - name: Auto-approve PR
        if: ${{ steps.semver.outputs.level == 'minor' || steps.semver.outputs.level == 'patch' }}
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge (merge commit)
        if: ${{ steps.semver.outputs.level == 'minor' || steps.semver.outputs.level == 'patch' }}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
